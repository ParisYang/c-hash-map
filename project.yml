---

# Notes:
# Sample project C code is not presently written to produce a release artifact.
# As such, release build options are disabled.
# This sample, therefore, only demonstrates running a collection of unit tests.

:project:
  :use_exceptions: FALSE
  :use_test_preprocessor: TRUE
  :use_auxiliary_dependencies: TRUE
  :build_root: build
#  :release_build: TRUE
  :test_file_prefix: test_

#:release_build:
#  :output: MyApp.out
#  :use_assembly: FALSE

:environment: []

:extension:
  :executable: .out

:paths:
  :test:
    - +:test/**
    - -:test/support
  :source:
    - src/**
  :support:
    - test/support

:defines:
  # in order to add common defines:
  #  1) remove the trailing [] from the :common: section
  #  2) add entries to the :common: section (e.g. :test: has TEST defined)
  :commmon: &common_defines []
  :test:
    - *common_defines
    - TEST
  :test_preprocess:
    - *common_defines
    - TEST

:cmock:
  :mock_prefix: mock_
  :when_no_prototypes: :warn
  :enforce_strict_ordering: TRUE
  :plugins:
    - :ignore
    - :callback
  :treat_as:
    uint8:    HEX8
    uint16:   HEX16
    uint32:   UINT32
    int8:     INT8
    bool:     UINT8

# Ceedling defaults to using gcc for compiling, linking, etc.
# If [:tools] is blank, gcc will be used (so long as it's in your system path)

:tools:
  :test_compiler:
    :executable: clang
    :name: Clang
    :arguments:
      - -DTEST
      - -I"$": COLLECTION_PATHS_TEST_SUPPORT_SOURCE_INCLUDE_VENDOR
      - -c ${1} # source code input file
      - -o ${2} # object file output
      - -g # add debugging symbols
      - -std=c99
  :test_linker:
    :executable: clang
    :name: Clang
    :arguments:
      - -DTEST
      - ${1} # list of object files to link
      - -o ${2} # executable file output
  :test_file_preprocessor:
    :executable: clang
    :name: Clang
    :arguments:
      - -E
      - -DTEST
      - -I"$": COLLECTION_PATHS_TEST_SUPPORT_SOURCE_INCLUDE_VENDOR
      - ${1} # source code input files
      - -o ${2} # object file output
  :test_dependencies_generator:
    :executable: clang
    :name: Clang
  :release_compiler:
    :executable: clang
    :name: Clang
    :arguments:
      - -I"$": COLLECTION_PATHS_RELEASE_TOOLCHAIN_INCLUDE
      - -c ${1} # source code input file
      - -o ${2} # object file output
      - -std=c99
  :release_linker:
    :executable: clang
    :name: Clang
    :arguments:
      - ${1} # list of object files to link
      - -o ${2} # executable file output
  :release_dependencies_generator:
    :executable: clang
    :name: Clang

:plugins:
  :load_paths:
    - vendor/ceedling/plugins
  :enabled:
    - stdout_pretty_tests_report
    - module_generator
...
